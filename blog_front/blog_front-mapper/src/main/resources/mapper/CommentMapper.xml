<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="root.mapper.CommentMapper" >
  <resultMap id="BaseResultMap" type="root.model.Comment" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="root_id" property="rootId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="approval" property="approval" jdbcType="INTEGER" />
    <result column="oppose" property="oppose" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="root.model.Comment" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, article_id, parent_id, root_id, create_time, update_time, approval, 
    oppose
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  
   <resultMap id="commentMap" type="root.model.Comment" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="root_id" property="rootId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="approval" property="approval" jdbcType="INTEGER" />
    <result column="oppose" property="oppose" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <association property="user" javaType="root.model.User">
		<result column="user_id" property="id"/>
		<result column="user_nickname" property="nickname"/>
		<result column="user_avatar" property="avatar"/>
		<result column="user_desc" property="desc"/>
	</association>
	<association property="article" javaType="root.model.Article">
		<result column="article_id" property="id"/>
		<result column="article_title" property="title"/>
	</association>
  </resultMap>
    
  <select id="pageRootByArtIdWithUser" parameterType="map" resultMap="commentMap">
  	SELECT c.id id,c.user_id user_id,c.article_id article_id,
  	c.parent_id parent_id,c.root_id root_id,
  	c.create_time create_time,c.update_time update_time,c.approval approval,c.oppose oppose,c.content content,
  	u.id user_id,u.nickname user_nickname,u.avatar user_avatar
	FROM `comment` c
	LEFT JOIN `user` u ON u.id = c.user_id
	WHERE c.article_id = #{articleId} AND c.root_id = 0
	ORDER BY c.approval desc,c.create_time desc
	LIMIT #{skip},#{pageSize}
  </select>
    
  <select id="getWithArtAndUserByPageSize" parameterType="map" resultMap="commentMap">
	SELECT c.id id,c.user_id user_id,c.article_id article_id,
  	c.parent_id parent_id,c.root_id root_id,
  	c.create_time create_time,c.update_time update_time,c.approval approval,c.oppose oppose,c.content content,
  	u.id user_id,u.nickname user_nickname,u.avatar user_avatar,u.desc user_desc,
  	a.id article_id,a.title article_title
	FROM `comment` c
	LEFT JOIN `user` u ON u.id = c.user_id
	LEFT JOIN article a ON a.id = c.article_id
	GROUP BY c.id
	ORDER BY c.create_time desc
	LIMIT #{pageSize}
  </select>  
    
  
  <resultMap id="userMap" type="root.model.User" >
    <id column="user_id" property="id" jdbcType="INTEGER" />
    <result column="user_nickname" property="nickname"/>
    <result column="user_avatar" property="avatar"/>
  </resultMap>  
  
  <resultMap id="articleMap" type="root.model.Article" >
    <id column="article_id" property="id" jdbcType="INTEGER" />
    <result column="article_title" property="title" jdbcType="VARCHAR" />
  </resultMap>
 
 <select id="getArtById" parameterType="map" resultMap="articleMap">
 	SELECT a.id article_id,a.title article_title
	FROM `comment` c
	LEFT JOIN article a ON a.id = c.article_id
	WHERE c.id = #{id}
 </select>
 
 <select id="getByIdWithUser" parameterType="map" resultMap="commentMap">
 	SELECT c.id id,c.user_id user_id,c.article_id article_id,
  	c.parent_id parent_id,c.root_id root_id,
  	c.create_time create_time,c.update_time update_time,c.approval approval,c.oppose oppose,c.content content,
  	u.id user_id,u.nickname user_nickname,u.avatar user_avatar,u.desc user_desc
  	FROM `comment` c
  	LEFT JOIN `user` u ON u.id = c.user_id
  	WHERE c.id = #{id}
 </select>    
    
 <select id="getUserById" parameterType="map" resultMap="userMap">
 	SELECT u.id user_id,u.nickname user_nickname,u.avatar user_avatar
	FROM `comment` c
	LEFT JOIN `user` u ON c.user_id = u.id
	WHERE c.id = #{id}
 </select>   
    
  <select id="getUserIdById" parameterType="map" resultType="int">
  	SELECT user_id
  	FROM `comment`
  	WHERE id = #{id}
  </select> 
   
  <select id="getChildByRootIdWithUser" parameterType="map" resultMap="commentMap">
  	SELECT c.id id,c.user_id user_id,c.article_id article_id,
  	c.parent_id parent_id,c.root_id root_id,
  	c.create_time create_time,c.update_time update_time,c.approval approval,c.oppose oppose,c.content content,
  	u.id user_id,u.nickname user_nickname,u.avatar user_avatar
  	FROM `comment` c
  	LEFT JOIN `user` u ON u.id = c.user_id
  	WHERE c.root_id = #{rootId}
  	ORDER BY c.approval desc,c.create_time desc
	LIMIT #{skip},#{pageSize}
  </select>
    
  <select id="countChildByRootId" parameterType="map" resultType="long">
  	SELECT count(1)
  	FROM `comment`
  	WHERE root_id = #{rootId}
  </select>
    
  <select id="countById" parameterType="map" resultType="int">
  	SELECT count(1)
  	FROM `comment`
  	WHERE id = #{id}
  </select>   
    
  <select id="pageByArtIdWithUser" parameterType="map" resultMap="commentMap">
  	SELECT c.id id,c.user_id user_id,c.article_id article_id,
  	c.parent_id parent_id,c.root_id root_id,
  	c.create_time create_time,c.update_time update_time,c.approval approval,c.oppose oppose,c.content content,
  	u.id user_id,u.nickname user_nickname,u.avatar user_avatar
	FROM `comment` c
	LEFT JOIN `user` u ON u.id = c.user_id
	WHERE c.article_id = #{articleId}
	ORDER BY c.approval desc,c.create_time desc
	LIMIT #{skip},#{pageSize}
  </select>
  
  <select id="countByArtId" parameterType="map" resultType="long">
  	SELECT count(1)
	FROM `comment`
	WHERE article_id = #{articleId}
  </select>
  
  
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from `comment`
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from `comment`
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="root.model.Comment" >
    insert into `comment` (id, user_id, article_id, 
      parent_id, root_id, create_time, 
      update_time, approval, oppose, 
      content)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, 
      #{parentId,jdbcType=INTEGER}, #{rootId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{approval,jdbcType=INTEGER}, #{oppose,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="root.model.Comment" keyProperty="id" useGeneratedKeys="true">
    insert into `comment`
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="rootId != null" >
        root_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="approval != null" >
        approval,
      </if>
      <if test="oppose != null" >
        oppose,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="articleId != null" >
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="rootId != null" >
        #{rootId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="approval != null" >
        #{approval,jdbcType=INTEGER},
      </if>
      <if test="oppose != null" >
        #{oppose,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="root.model.Comment" >
    update `comment`
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="articleId != null" >
        article_id = #{articleId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="rootId != null" >
        root_id = #{rootId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="approval != null" >
        approval = #{approval,jdbcType=INTEGER},
      </if>
      <if test="oppose != null" >
        oppose = #{oppose,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="root.model.Comment" >
    update `comment`
    set user_id = #{userId,jdbcType=INTEGER},
      article_id = #{articleId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      root_id = #{rootId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      approval = #{approval,jdbcType=INTEGER},
      oppose = #{oppose,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="root.model.Comment" >
    update `comment`
    set user_id = #{userId,jdbcType=INTEGER},
      article_id = #{articleId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      root_id = #{rootId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      approval = #{approval,jdbcType=INTEGER},
      oppose = #{oppose,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>